먼저, 일반적인 React에서 사용하듯이 데이터를 fetching 해올건데 아래와 같이 코드를 작성한다.

import { useEffect, useState } from "react";

export const metadata = {
  title: "Home",
};

function Page() {
  const [movies, setMovies] = useState();
  const getMovies = async () => {
    const response = await fetch(
      "https://nomad-movies.nomadcoders.workers.dev/movies"
    );
    const json = await response.json();
    setMovies(json);
  };
  useEffect(() => {
    getMovies();
  }, []);
  return <div>{JSON.stringify(movies)}</div>;
}

export default Page;


그리고 나서 실행시켜보면 오류가 발생하는데 useState를 사용함으로서 interactive component가 필요하기 때문에 'use client' 를 써주어야 한다고 한다.

'use client' 를 추가한 후에 실행시켰는데도 오류가 발생했다.
이유는 client component에서는 metadata를 export 할 수 없기 때문이다.

그래서 metadata 객체를 삭제한 후 실행해보면 정상적으로 동작한다.
최종 코드는 아래와 같다.

"use client";

import { useEffect, useState } from "react";

function Page() {
  const [movies, setMovies] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const getMovies = async () => {
    const response = await fetch(
      "https://nomad-movies.nomadcoders.workers.dev/movies"
    );
    const json = await response.json();
    setMovies(json);
    setIsLoading(false);
  };
  useEffect(() => {
    getMovies();
  }, []);
  return <div>{isLoading ? "Loading..." : JSON.stringify(movies)}</div>;
}

export default Page;


여기까지가 리액트에서의 일반적인 데이터 fetching 방법이다.

보다시피 fetch는 항상 client component에서 일어난다.
즉, 브라우저가 API에 요청을 보낸다는 것이다.

브라우저 콘솔의 network 탭에서 보면 URL이 사용자의 브라우저에서 호출된 것을 볼 수 있는데
이는 곧 API key 등 중요한 정보는 담을 수 없다는 것을 의미한다. 
즉, 데이터베이스와 직접적으로 통신할 수 없다는 얘기이기도 하다.(보안에 취약하기 때문에)

그래서 정리하자면, React에서는 일반적으로 React APP <====> API <====> DB 와 같이
리액트 앱을 만들어서 API를 통해 데이터베이스와 통신하고 데이터베이스에서 다시 API를 이용해서 리액트앱에 응답을 전해준다.

예를 들어 client에서 모든 것을 fetch한다면 보안을 위해 항상 API를 만들어야 하고 그 뒤에 DB와 통신할 수 있을 것이다.
또한, fetch 하기위해 반드시 useState를 사용해야 하며, 로딩에 대한 state도 직접 확인하고 설정해주어야 하고 useState 훅을 사용했기 때문에 metadata를 사용할 수 없다.

그런데 만약 Next.js 백엔드가 API 없이 직접 데이터베이스와 통신할 수 있다면 많은 것이 나아질 것이다.
즉 server component에서 fetch를 한다면? 더이상 API는 필요가 없게 되고 그로 인해
useEffect, useState를 쓰지 않아도 되며, 따로 로딩상태를 구현하지 않아도 된다.