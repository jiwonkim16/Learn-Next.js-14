Next.js의 장점을 부각시키기 위해서 데이터 fetching 을 구현하기 위해 client 컴포넌트에서 React에서 주로 사용하던 방식을 사용해봤다.(useState, useEffect 등)
또한, 로딩상태를 스스로 관리했다.

그리고나서 Next.js에서 제공하는 server component를 이용하여 API를 사용하지 않고 직접적으로 데이터베이스와 통신할 수 있었고
API키를 이용해서 API와 통신도 해봤다.
하지만 fetch하기 위해 컴포넌트를 async로 만들었고 원하는 곳에서 fetch 함수를 작성한 후 데이터를 await한 후 UI를 리턴하는 방식으로 작성했다.

그리고 fetch함수가 시간이 오래 걸리면 사용자는 아무것도 볼 수 없게되는 문제를 해결하기 위해 loading 파일을 생성했다.
이 로딩 컴포넌트는 프레임워크에 의해 사용되며, 사용자가 처음으로 페이지에 요청하게 되면 프레임워크가 즉시 사용자에게 page 파일의 UI 대신 
로딩 컴포넌트를 준다.

왜냐하면 페이지는 fetching 이 끝나기를 await 하고 있기 때문이다!


그리고 병렬로 데이터 fetch 시 순차적으로 실행되는 문제를 해결하기 위해 Promise.all 을 사용해봤고
이로 인해 2가지 요청을 한번에 해결할 수 있는 반면, 
이 2가지 Promise가 모두 끝날때까지 UI가 보여지지 않는다는 문제가 있었고

다시 이를 해결하기 위해 react 기능 중 Suspense를 활용하여 로딩 상태를 분리했다. 
그래서 fetch 를 하는 각각의 컴포넌트도 async로 만들고 page에서 Suspense의 자식요소로 붙여주었다.
그럼으로서 page가 await 하는 것이 아니라 각각의 컴포넌트가 page에서 await 하게끔 했다.