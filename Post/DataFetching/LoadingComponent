이전에 server component에서 fetch하는 방법에 대해 알아봤는데 
데이터를 fetch하는 코드를 작성하고 그걸 컴포넌트에 넣기만 하면 됬다. 
그럼으로서 결과값만 사용자에게 보여줄 뿐 fetch 관련 코드들은 전달되지 않음으로서 안전성을 확보했다.

다만, 백엔드에서 fetch 되기 때문에 혹여 데이터를 불러오는데 긴 시간이 걸리는 경우 사용자를 위한 UI가 없다.
즉, 백엔드에서 렌더링 작업이 늦어지게 됨으로서 사용자는 아무것도 볼 수 없다는 문제가 발생한다.

이를 해결하기 위해서 loading component라는 것을 만들 수 있는데 
(home) 폴더 안에 loading.tsx 파일을 만들고 아래와 같이 코드를 작성한다.

function Loading() {
  return <h2>Loading</h2>;
}

export default Loading;

그리고 나서 페이지에 접근해보면 분명 백엔드에서는 로딩 중인데 (파비콘은 로딩 중)
전처럼 페이지 전체가 비워져있지 않고 즉시 nav bar를 포함한 UI를 볼 수가 있다!!

server component에서 fetch하는 중에 loading 파일을 제공해주면 그 파일이 페이지에 나타나며, 
서버 컴포넌트가 fetch를 끝내면 next.js는 로딩 컴포넌트를 페이지의 컴포넌트로 바꿔줄 것이다.

그래서 서버 컴포넌트가 async 여야 한다는 것이다.
사용자가 페이지에 도착한 순간 Next.js는 로딩 페이지를 보여주며, streaming을 사용해서 페이지를 작은 HTML 조각으로 나눠서
준비된 HTML부분을 브라우저에 전달한다. (네비게이션이나 로딩과 같은)
그리고 브라우저에게 백엔드에서 통신이 아직 마무리되지 않았고 기다려줘야 한다고 얘기하면서
await가 끝나면 브라우저에게 마지막 HTML 부분을 전달해주기 때문이다.


또한, 가장 중요한 건 파일이름이 loading이어야 한다는 것과 page 파일 옆에 있어야 한다는 것이다.
그래야 해당 페이지에 대해서만 로딩이 작동하게 된다.


즉, 특수 파일 loading.js는 React Suspense를 사용하여 의미 있는 로딩 UI를 만드는 데 도움이 되며,
이 규칙을 사용하면 route 세그먼트의 콘텐츠가 로드되는 동안 서버에서 즉시 로딩 상태를 표시할 수 있다.
렌더링이 완료되면 새 콘텐츠가 자동으로 교체된다.

-----------------------------------------------------------------------------



