/about-us
위 url은 dynamic이 아니라 static(정적) route이다.

dynamic route은 아래와 같은 형식으로 되어 있다.
movie를 예로 들자면 사용자가 입력한 숫자가 들어가거나 변수가 있는 형태이다.
/movies/1234
/movies/:id

-------------------------------------------------------------
그래서 URL이 dynamic이 되도록 하려면 어떻게 해야할까?
이를 위해 먼저 movies를 예로 들어서

/movies url 생성한다. 즉, movies 폴더를 생성한다.
다만, /movies로 이동했을 때 사용자들이 무언가를 보게 하는게 아니라
Home페이지에서 영화목록이 표시되고 영화를 클릭하면 해당 영화 상세페이지로 이동시키고 싶다.

그래서 movies 폴더 안에 [id] 와 같은 폴더를 생성하고 [id] 폴더 안에 page.tsx 파일을 생성한다.
[id]폴더가 하는 역할은 Next.js에게 movies/ 뒤에 무엇이 들어가도 괜찮다는 것을 알려주는 것이다.

위와 같이 해주고 나서 localhost:3000/movies/1231434 와 같이 아무 숫자나 입력해도 만들어둔 movieDetail 컴포넌트가 렌더링된다.

-------------------------------------------------------------
그렇다면 이번엔 1231434와 같은 데이터가 필요하다면 어떻게 해야할까?
영화세부정보 페이지에서 어떤 prop을 받는지 console에 먼저 찍어볼건데 지금까지 해왔던 것과는 다른 것이 나오는데
예를들어 아래와 같이 코드를 작성하고

function MovieDetail(props) {
  console.log(props);
  return <div>MovieDetail</div>;
}

/movies/123123 URL에 접속하게 되면 해당 페이지에서 브라우저 콘솔창에는 아무것도 출력되지 않고
VSCode 상 터미널에서 { params: { id: '123123' }, searchParams: {} } 형태로 출력된 것을 볼 수 있다.

왜냐하면 MovieDetail 은 백엔드에서 실행되고 있기 때문이며, 클라이언트 컴포넌트가 아니기 때문에 프론트엔드에서 실행되지 않기 때문이다!!

여튼 보다시피 Id 가 있는 객체를 얻을 수 있었다. 만약 [potato] 라고 파일명을 지정했으면 {potato : '123123'} 과 같은 형식으로 출력되었을 것이다.

그리고 searchParams는 주로 검색 결과를 얻을 때 많이 사용되는데
예를 들어 /movies/1234?region=kr&page=2
와 같은 식의 URL로 접속할 경우에 searchParams : {region : 'kr', page : 2} 가 출력된다.