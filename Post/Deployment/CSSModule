이제 애플리케이션을 스타일링하기 위해서 Next.js에서는 바로 CSS 모듈을 사용할 수 있다.
'바로' 라는건 Next.js에 어떤 설정을 따로 하지 않아도 된다는 의미이다.

물론 styled component라던지 tailwind 를 사용할 수 있다.
그러나 이번엔 아무것도 설치하지 않고 CSS 모듈을 사용해보려 한다.
그 전에 먼저 어플리케이션 전체에 적용할 글로벌 CSS파일을 생성해야 한다.

글로벌 CSS 파일 생성을 위해 Root 경로에 styles라는 이름으로 폴더를 생성하고 그 안에 global.css 파일을 생성한다.
그리고 global.css를 root인 layout에 import 해주어야 한다.

import { Metadata } from "next";
import Navigation from "../components/navigation";
import "../styles/global.css";

export const metadata: Metadata = {
  title: {
    template: "%s| Next-Learn",
    default: "Loading...",
  },
  description: "Generated by Next.js",
};

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <Navigation />
        {children}
      </body>
    </html>
  );
}

이렇게 하면 전체 페이지에 global.css 파일의 스타일링이 적용된 것을 확인할 수 있다.

그런데 만약 특정 페이지만 스타일링 하고 싶다면 위 방법은 좋은 방법이 아닐 것이다.
물론, global 파일은 전체 폰트라던지 reset 등에서 쓰임새가 있다.

이번엔 CSS 모듈에 대해 그리고 이것이 어떻게 작동하는지에 대해 알아보면 다음과 같다.
예를 들어, components 폴더 안에 navigation 컴포넌트를 스타일링 하기 위해서

1. navigation 파일과 같은 경로 상에 navigation.module.css 라는 새로운 파일을 생성한다.
이때 가장 중요한 것은 파일이름에 .module.css 를 갖고 있어야 한다는 것이며, 사실 파일 위치는 중요치 않으나 편의성을 위해 같은 경로에 두거나 styles 폴더 내에 있어도 된다.

2. module.css 파일 안에서는 nav 처럼 일반적인 tags를 위한 css 코드를 생성하는 방식이 아닌 classname만을 생성한다.

3. 이 class를 컴포넌트로 전달하기 위해서는 module.css 파일을 자바스크립트 파일인 것처럼 import 해야 한다.
import styles from "../components/navigation.module.css";
그러면 styles는 마치 classname들을 보유한 자바스크립트 객체처럼 동작할 것이다.

4. 그리고 원하는 곳에 다음과 같이 작성한다.
<nav className={styles.nav}>
검사 창에서 nav 태그의 클래스 네임을 확인하면 랜덤한 텍스트가 보일텐데 이로 통해 클래스명이 충돌할 위험은 전혀 없어지게 된다는 것을 알 수 있다.

5. 만약 nav 태그 안에 ul 태그도 스타일링 해주고 싶다면 
ul {} 이런 식이 아니라 반드시 className을 지정해서 아래와 같이 작성해야 한다.
.list {} 또는 .nav ul {}



