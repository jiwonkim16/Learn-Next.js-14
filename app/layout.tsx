import Navigation from "../components/navigation";

export const metadata = {
  title: "Next.js",
  description: "Generated by Next.js",
};

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en">
      <body>
        <Navigation />
        {children}
      </body>
    </html>
  );
}

// Layout system
// Next.js의 레이아웃 시스템을 배워야 하는 이유는
// 내가 어플리케이션을 빌드할 때 재사용하는 요소들이 있기 때문이다.
// 예를 들어 여러 페이지에 공통적으로 적용되는 네비게이션 바가 있다고 가정했을 때,
// 각 컴포넌트에 네비게이션 바 컴포넌트를 복사/붙여넣기 해도 되지만 이는 페이지가 여러 개일 경우엔 불편한 작업일 것이다.
// 이럴 때 필요한 것이 복사 붙여넣기 없이 어디서나 사용할 수 있는 레이아웃 파일이다.

// 레이아웃 파일이 동작하는 과정은 다음과 같다.
// 만약 내가 about-us 페이지로 이동한다고 가정했을 때, next.js는 About-us 컴포넌트로 가서 해당 구성요소들을 화면에 rendering 하는 것이 아니라
// 실제로는 layout 컴포넌트에 먼저 가서 레이아웃 컴포넌트에 있는 export된 디폴트 컴포넌트를 렌더링 한다.
// 그게 실제로 Next.js가 렌더링하는 것이다.

// 즉, Next.js는 layout 컴포넌트를 렌더링하고 URL을 확인한다.
// URL을 통해 About 컴포넌트를 렌더링해야 한다는 것을 인식한 후에 <Layout> <About /> </Layout> 과 같은 식으로 렌더링하는 것이다.
// 즉 이동하려는 해당 페이지는 layout 컴포넌트의 children prop이 될 것이다.
// 그렇기 때문에 Next.js 프로젝트 생성 시 layout 컴포넌트가 자동으로 생성되는 것이다.

// ---------------------------------------------------------------------

// 지금까지는 Next.js의 기본적인 레이아웃 시스템에 대해 알아봤다면 이번엔 레이아웃 시스템의 몇가지 특이한 점에 대해 알아보면 다음과 같다.
// 예를 들어 about 페이지 만의 다른 레이아웃을 만들 수 있다.
// 이건 매우 유용한 기능인데 왜냐하면 보통 application에는 하나의 레이아웃만 가지는게 아니기 때문이다.
// 따라서 내가 원하면 about-us 폴더 안에 새 레이아웃 파일을 만들면 된다.
// 새 레이아웃 파일에는 내가 about 페이지에 원하는 레이아웃 내용을 입력할 수 있다.
// 이때 주의할 점은 기존에 있던 root layout 파일과는 달리 html, body태그는 사용하면 안된다!!

// export default function AboutUsLayout({ children }: { children: React.ReactNode }) {
//   return (
//     <div>
//       {children}
//       &copy; Next JS is great!
//     </div>
//   );
// }

// 이렇게 작성하면 home 페이지에서는 카피 라이트가 보이지 않고 about 페이지로 이동해야만 카피 라이트가 보인다!!

// 만약 about-us/company/jobs/sales 경로에 page.tsx 파일을 하나 만들어보면 sales 페이지에도 about-us 레이아웃이 적용된 것을 볼 수 있다.
// 즉, Next.js는 상위폴더로 이동하여 레이아웃이 있는지 확인하고 레이아웃이 있는 경우에는 이 레이아웃을 사용하여 하위항목을 렌더링하는 것이다.
// 그러므로 레이아웃은 서로 상쇄되는 것이 아니라 중첩이 가능하다는 점을 기억해야 한다.

// 정리하면 내가 sales 페이지로 이동한다면 Next.js는 먼저 root 레이아웃을 가져와서 무언가를 렌더링 할 준비를 한다.
// 그 다음 URL을 확인한다. 그래서 about-us 폴더로 먼저 가서 여기에 레이아웃 파일이 있는지 확인하고
// 레이아웃 파일이 있다는 것을 알게 되고 AboutUsLayout을 렌더링한다.
{
  /* <Layout>
  <AboutUsLayout />
</Layout> */
}
// 위와 같은 형태일 것이다.

// 그리고 company --> jobs --> sales 폴더 순으로 내려가면서 page나 레이아웃 파일이 잇는지를 확인하고
// sales 폴더에 page를 렌더링한다.
{
  /* <Layout>
  <AboutUsLayout>
    <Sales />
  </AboutUsLayout>
</Layout> */
}
// 위와 같은 형태로 렌더링된다.
// 레이아웃은 서로 상쇄 / 대체되는 것이 아니라 중첩되는 것이라는 점을 기억해야 한다.

// ---------------------------------------------------------------------

// MetaData
